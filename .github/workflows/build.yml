name: Build-Veloera

on: workflow_dispatch

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Veloera
    steps:
    
      - uses: actions/checkout@v4
    
      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Clone Repo
        run: |
            echo "Fetching latest tag from Veloera repository..."
            export LATEST_APP=$(wget -qO- https://api.github.com/repos/Veloera/Veloera/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')
            echo "Latest tag: $LATEST_APP"
            if [ -z "$LATEST_APP" ]; then
              echo "Failed to get latest tag, using main branch"
              git clone https://github.com/Veloera/Veloera
            else
              echo "Cloning with tag: $LATEST_APP"
              git clone -b $LATEST_APP https://github.com/Veloera/Veloera
            fi
            echo "Clone completed successfully"

      - name: Build Frontend
        env:
          CI: ""
        run: |
          echo "Starting frontend build process..."
          cd Veloera/web
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          echo "Installing dependencies..."
          bun install
          
          echo "Installing sse module..."
          bun add sse
          
          echo "Creating vite.config.js..."
          cat > vite.config.js << 'EOF'
          import { defineConfig } from "vite";
          import react from "@vitejs/plugin-react";
          
          export default defineConfig({
            esbuild: {
              loader: "jsx",
              include: /src\/.*\.[jt]sx?$/,
              exclude: []
            },
            optimizeDeps: {
              esbuildOptions: {
                loader: {
                  ".js": "jsx"
                }
              }
            },
            build: {
              rollupOptions: {
                external: ["sse"]
              }
            },
            plugins: [react()]
          });
          EOF
          
          echo "Vite config created:"
          cat vite.config.js
          
          echo "Getting version info..."
          export VERSION_INFO=$(git describe --tags 2>/dev/null || echo "unknown")
          echo "Version: $VERSION_INFO"
          
          echo "Starting build..."
          DISABLE_ESLINT_PLUGIN='true' VITE_REACT_APP_VERSION="$VERSION_INFO" bun run build
          
          echo "Build completed, verifying frontend output..."
          if [ -d "dist" ]; then
            echo "✅ dist directory created successfully"
            echo "Files in dist:"
            ls -la dist/
            echo "Total files: $(find dist -type f | wc -l)"
            echo "Dist size: $(du -sh dist)"
            
            # 验证关键文件
            if [ -f "dist/index.html" ]; then
              echo "✅ index.html found"
              echo "index.html size: $(ls -lh dist/index.html)"
              # 确保index.html不为空
              if [ -s "dist/index.html" ]; then
                echo "✅ index.html is not empty"
              else
                echo "ERROR: index.html is empty!"
                exit 1
              fi
            else
              echo "ERROR: index.html not found in dist!"
              exit 1
            fi
          else
            echo "ERROR: dist directory not found!"
            exit 1
          fi
          
          cd ../..
          echo "Frontend build process completed"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Build Backend
        run: |
          echo "Starting backend build process..."
          cd Veloera
          
          # 设置Go交叉编译环境变量
          export GOOS=freebsd
          export GOARCH=amd64
          export CGO_ENABLED=0
          
          echo "Go environment:"
          go version
          echo "GOOS: $GOOS"
          echo "GOARCH: $GOARCH"
          echo "CGO_ENABLED: $CGO_ENABLED"
          
          # 下载依赖，添加重试机制
          echo "Downloading Go modules..."
          for i in 1 2 3; do
            if go mod download; then
              echo "✅ Go modules downloaded successfully"
              break
            else
              echo "Attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # 验证模块
          go mod verify
          
          # 动态获取正确的模块名，避免硬编码错误
          MODULE_NAME=$(head -1 go.mod | awk '{print $2}')
          echo "Using module name: $MODULE_NAME"
          
          # 获取版本信息，添加容错机制
          VERSION_INFO=$(git describe --tags 2>/dev/null || echo "v0.0.0-unknown")
          echo "Building with version: $VERSION_INFO"
          
          # 验证前端文件已正确构建
          if [ ! -f "web/dist/index.html" ]; then
            echo "ERROR: Frontend dist/index.html not found!"
            echo "Available files in web/:"
            ls -la web/ || echo "web directory not found"
            exit 1
          fi
          
          echo "✅ Frontend verification passed"
          echo "Frontend dist directory contents:"
          ls -la web/dist/
          
          # 构建FreeBSD二进制文件
          echo "Building FreeBSD binary..."
          go build -ldflags "-s -w -X '${MODULE_NAME}/common.Version=${VERSION_INFO}'" -o veloera-freebsd
          
          # 验证二进制文件
          if [ ! -f "veloera-freebsd" ]; then
            echo "ERROR: Binary file not created!"
            exit 1
          fi
          
          # 验证二进制文件大小确保前端正确嵌入
          BINARY_SIZE=$(stat -c%s veloera-freebsd)
          BINARY_SIZE_MB=$((BINARY_SIZE / 1024 / 1024))
          echo "Binary size: $BINARY_SIZE bytes (${BINARY_SIZE_MB} MB)"
          
          # 检查是否包含前端资源（应该>10MB）
          if [ $BINARY_SIZE -lt 10000000 ]; then
            echo "WARNING: Binary size seems small (${BINARY_SIZE_MB}MB), frontend might not be embedded correctly"
            echo "Checking for embedded resources..."
            if strings veloera-freebsd | grep -q "index.html"; then
              echo "✅ Found index.html in binary"
            else
              echo "ERROR: index.html not found in binary - frontend not embedded!"
              exit 1
            fi
          else
            echo "✅ Binary size looks good (${BINARY_SIZE_MB}MB) - frontend likely embedded correctly"
          fi
          
          # 验证版本信息注入
          if strings veloera-freebsd | grep -q "$VERSION_INFO"; then
            echo "✅ Version information successfully injected: $VERSION_INFO"
          else
            echo "WARNING: Version information might not be injected correctly"
            echo "Checking for any version info in binary..."
            strings veloera-freebsd | grep -i version | head -5 || echo "No version info found"
          fi
          
          # 验证目标平台
          file veloera-freebsd
          echo "✅ Backend build completed successfully"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: veloera-freebsd
          path: Veloera/veloera-freebsd
  
      - name: Generate release tag
        id: tag
        run: |
          # 获取远程仓库的最新标签
          REMOTE_TAG=$(wget -qO- https://api.github.com/repos/Veloera/Veloera/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')
          echo "Remote tag: $REMOTE_TAG"
          
          # 生成本地构建标签，避免与远程标签冲突
          if [ -n "$REMOTE_TAG" ]; then
            BUILD_TAG="${REMOTE_TAG}-freebsd-$(date +%Y%m%d-%H%M%S)"
          else
            BUILD_TAG="v1.0.0-freebsd-$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "Generated build tag: $BUILD_TAG"
          echo "release_tag=$BUILD_TAG" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: "Veloera FreeBSD Build - ${{ steps.tag.outputs.release_tag }}"
          body: |
            ## Veloera FreeBSD 构建版本
            
            基于 Veloera 项目的 FreeBSD 二进制文件构建
            
            ### 构建信息
            - 构建时间: ${{ github.run_id }}
            - 目标平台: FreeBSD amd64
            - 构建环境: Ubuntu + Go 交叉编译
            
            ### 使用说明
            1. 下载 `veloera-freebsd` 二进制文件
            2. 上传到 FreeBSD 服务器
            3. 添加执行权限: `chmod +x veloera-freebsd`
            4. 运行: `./veloera-freebsd`
            
            ### 修复内容
            - ✅ 解决网页空白问题
            - ✅ 正确的版本信息注入
            - ✅ 完整的前端资源嵌入
            - ✅ 稳定的构建流程
          files: Veloera/veloera-freebsd
          draft: false
          prerelease: false
              
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 8
