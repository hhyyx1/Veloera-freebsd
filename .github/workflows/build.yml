name: Build-Veloera
on: 
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (leave empty for latest)'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
  schedule:
    - cron: '0 2 * * 0'  # 每周日凌晨2点自动构建
  push:
    branches: [ main ]  # 当推送到主分支时触发

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Get latest tag
        id: get_tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            # 添加错误处理
            tag=$(curl -s "https://api.github.com/repos/Veloera/Veloera/tags" | jq -r '.[0].name // "v1.0.0"')
            echo "tag=$tag" >> $GITHUB_OUTPUT
          fi
          echo "Selected tag: $tag"

  build-all:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Clone Veloera repo
        run: |
          git clone -b ${{ needs.get-version.outputs.tag }} https://github.com/Veloera/Veloera.git veloera-src

      - name: Build Frontend
        env:
          CI: false
          DISABLE_ESLINT_PLUGIN: true
        run: |
          cd veloera-src/web
          
          # 检查是否存在 package.json
          if [ ! -f package.json ]; then
            echo "package.json not found!"
            exit 1
          fi
          
          # 安装依赖
          bun install
          
          # 创建或更新 vite.config.js
          cat > vite.config.js << 'EOF'
          import { defineConfig } from "vite";
          import react from "@vitejs/plugin-react";
          
          export default defineConfig({
            esbuild: {
              loader: "jsx",
              include: /src\/.*\.[jt]sx?$/,
              exclude: []
            },
            optimizeDeps: {
              esbuildOptions: {
                loader: {
                  ".js": "jsx"
                }
              }
            },
            build: {
              outDir: "dist",
              rollupOptions: {
                external: ["sse"]
              }
            },
            plugins: [react()]
          });
          EOF
          
          # 构建前端
          VITE_REACT_APP_VERSION=${{ needs.get-version.outputs.tag }} bun run build
          
      - name: Verify frontend build
        run: |
          echo "Checking frontend build files:"
          ls -la veloera-src/web/dist/ || echo "No dist directory found"
          find veloera-src/web/dist/ -type f | head -10 || echo "No files found"
          
          # 检查关键文件
          if [ ! -f "veloera-src/web/dist/index.html" ]; then
            echo "ERROR: index.html not found in dist directory!"
            exit 1
          fi
          
          echo "Frontend build verification passed"

      - name: Build Backend
        run: |
          cd veloera-src
          
          # 确保前端文件存在且在正确位置
          if [ ! -d "web/dist" ]; then
            echo "ERROR: Frontend dist directory not found!"
            echo "Current directory structure:"
            find . -name "dist" -type d
            exit 1
          fi
          
          if [ ! -f "web/dist/index.html" ]; then
            echo "ERROR: index.html not found in web/dist!"
            exit 1
          fi
          
          echo "Frontend files verified, proceeding with backend build..."
          
          # 显示将要嵌入的文件
          echo "Files to be embedded:"
          find web/dist -type f | head -20
          
          go mod download
          
          # 构建 Linux 版本
          echo "Building Linux version..."
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags "-s -w -X 'veloera/common.Version=${{ needs.get-version.outputs.tag }}'" \
            -o veloera-linux-amd64
          
          # 构建 FreeBSD 版本
          echo "Building FreeBSD version..."
          CGO_ENABLED=0 GOOS=freebsd GOARCH=amd64 go build \
            -ldflags "-s -w -X 'veloera/common.Version=${{ needs.get-version.outputs.tag }}'" \
            -o veloera-freebsd-amd64
          
          # 验证构建结果
          if [ -f "veloera-linux-amd64" ]; then
            echo "Linux binary built successfully: $(ls -lh veloera-linux-amd64)"
          else
            echo "ERROR: Linux binary not created!"
            exit 1
          fi
          
          if [ -f "veloera-freebsd-amd64" ]; then
            echo "FreeBSD binary built successfully: $(ls -lh veloera-freebsd-amd64)"
          else
            echo "ERROR: FreeBSD binary not created!"
            exit 1
          fi

      - name: Test binary (basic verification)
        run: |
          cd veloera-src
          
          # 基本的二进制文件验证
          file veloera-linux-amd64
          file veloera-freebsd-amd64
          
          # 检查二进制文件大小（嵌入前端后应该比较大）
          linux_size=$(stat -c%s veloera-linux-amd64)
          freebsd_size=$(stat -c%s veloera-freebsd-amd64)
          
          echo "Linux binary size: $linux_size bytes"
          echo "FreeBSD binary size: $freebsd_size bytes"
          
          # 如果二进制文件太小，可能没有正确嵌入前端资源
          if [ $linux_size -lt 10000000 ]; then  # 10MB
            echo "WARNING: Linux binary seems too small, frontend might not be embedded correctly"
          fi
          
          if [ $freebsd_size -lt 10000000 ]; then  # 10MB
            echo "WARNING: FreeBSD binary seems too small, frontend might not be embedded correctly"
          fi

      - name: Upload builds
        uses: actions/upload-artifact@v4
        with:
          name: veloera-builds
          path: |
            veloera-src/veloera-linux-amd64
            veloera-src/veloera-freebsd-amd64

  create-release:
    runs-on: ubuntu-latest
    needs: [get-version, build-all]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Debug trigger info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Create release input: ${{ github.event.inputs.create_release }}"
          echo "Should create release: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == '') }}"
          
          # 显示构建产物
          echo "Built artifacts:"
          find artifacts/ -type f -exec ls -lh {} \;

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-version.outputs.tag }}-build
          name: Veloera Build ${{ needs.get-version.outputs.tag }}
          body: |
            Automated build of Veloera ${{ needs.get-version.outputs.tag }}
            
            ## Files included:
            - `veloera-linux-amd64`: Linux AMD64 binary (with embedded frontend)
            - `veloera-freebsd-amd64`: FreeBSD AMD64 binary (with embedded frontend)
            
            ## Usage:
            1. Download the appropriate binary for your platform
            2. Make it executable: `chmod +x veloera-*`
            3. Run directly: `./veloera-freebsd-amd64` (or linux version)
            4. Access web interface at: `http://localhost:3000` (or your configured port)
            
            Built on: ${{ github.run_number }}
            Triggered by: ${{ github.event_name }}
            
            ## Note:
            Both binaries include the complete web frontend embedded within them.
            No additional files are required.
          files: |
            artifacts/veloera-builds/*
          draft: false
          prerelease: false

  cleanup:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 5
